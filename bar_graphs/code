import pandas as pd
import matplotlib.pyplot as plt
import scipy.stats
import numpy as np
import gseapy as gp
from statsmodels.stats.multitest import multipletests
import seaborn as sns
import warnings
warnings.simplefilter(action='ignore', category=FutureWarning)

# File paths remain the same
model = '/Users/sahajsatani/Library/CloudStorage/OneDrive-UniversityofTexasSouthwestern/UTSW Westover/Model.csv'
osm = '/Users/sahajsatani/Library/CloudStorage/OneDrive-UniversityofTexasSouthwestern/UTSW Westover/OmicsSomaticMutations.csv'
effect = '/Users/sahajsatani/Library/CloudStorage/OneDrive-UniversityofTexasSouthwestern/UTSW Westover/CRISPRGeneEffect.csv'

kegg = gp.read_gmt(path = '/Users/sahajsatani/Library/CloudStorage/OneDrive-UniversityofTexasSouthwestern/UTSW Westover/c2.cp.kegg_medicus.v2024.1.Hs.symbols.gmt')
pid = gp.read_gmt(path = '/Users/sahajsatani/Library/CloudStorage/OneDrive-UniversityofTexasSouthwestern/UTSW Westover/c2.cp.pid.v2024.1.Hs.symbols.gmt')
biocarta = gp.read_gmt(path = '/Users/sahajsatani/Library/CloudStorage/OneDrive-UniversityofTexasSouthwestern/UTSW Westover/c2.cp.biocarta.v2024.1.Hs.symbols.gmt')

analyses = [
    {"cancer_type": "COAD", "gene_change": ['p.G13D', 'p.G12V', 'p.G12D', 'p.A146T']},
    {"cancer_type": "LUAD", "gene_change": ['p.G12A', 'p.G12C', 'p.G12D', 'p.G12S', 'p.G13C']},
    {"cancer_type": "PAAD", "gene_change": ['p.G12D', 'p.G12R', 'p.G12V']}
]

bright_colors = {
    'p.G12A': '#FF9999',  # Bright coral
    'p.G12C': '#66B3FF',  # Bright blue
    'p.G12D': '#99FF99',  # Bright green
    'p.G12R': '#FF99FF',  # Bright pink
    'p.G12S': '#FFCC99',  # Bright peach
    'p.G12V': '#99FFFF',  # Bright cyan
    'p.G13C': '#FF99CC',  # Bright rose
    'p.G13D': '#FFFF99',  # Bright yellow
    'p.A146T': '#CC99FF'  # Bright purple
}

all_mutations = set()
for analysis in analyses:
    all_mutations.update(analysis["gene_change"])
mutation_colors = dict(zip(
    sorted(all_mutations),
    sns.color_palette("pastel", n_colors=len(all_mutations))
))

def extract_middle(label):
    parts = label.split('_')
    if len(parts) == 4:
        return f"{parts[1]}_{parts[2]}"
    else:
        return parts[1]

model_df = pd.read_csv(model, header=0, index_col=0)
osm_df = pd.read_csv(osm, header=0, low_memory=False)
effect_df = pd.read_csv(effect, header=0, index_col=0)

def rungsea(cancer, protein, mutations):
    appended_results = []
    
    for mut in mutations:
        cancer_filter = model_df[model_df['OncotreeCode'] == cancer]
        osm_filter_pie = cancer_filter.merge(osm_df, on=['ModelID'], how='inner')
        protein_filter = osm_filter_pie[(osm_filter_pie['HugoSymbol'] == protein)]
        protein_change_filter = protein_filter[(protein_filter['ProteinChange']== mut)]
        protein_change_filter = protein_change_filter.filter(['ModelID'])

        cancer_filter = cancer_filter.reset_index()
        cancer_filter = cancer_filter.filter(['ModelID'])
        protein_filter = protein_filter.filter(['ModelID'])
        wt_and_mutant = pd.concat([cancer_filter, protein_filter])
        wt_gene = wt_and_mutant.drop_duplicates(keep=False)

        effect_mutant = protein_change_filter.merge(effect_df, on=['ModelID'], how='inner')
        effect_mutant = effect_mutant.set_index('ModelID')
        effect_wt = wt_gene.merge(effect_df, on=['ModelID'], how='inner')
        effect_wt = effect_wt.set_index('ModelID')

        _, p_value = scipy.stats.ttest_ind(effect_wt, effect_mutant)
        pvalue_df = pd.DataFrame(p_value)
        pvalue_df = pvalue_df.set_index(effect_df.columns)
        pvalue_df = pvalue_df.rename(columns={0: 'p-value'})

        sig_pv = pvalue_df[pvalue_df['p-value'] < 0.05].copy()
        sig_pv = sig_pv.reset_index()
        sig_pv['gene name'] = sig_pv['index'].apply(lambda x: x.split(' ')[0])

        rnk = pd.DataFrame()
        rnk['scores'] = abs(effect_mutant.mean(axis=0, skipna=True, numeric_only=True))
        rnk = rnk.reset_index()
        rnk = rnk.rename(columns={'index': 'gene'})
        rnk = rnk.sort_values('scores', ascending=False)
        rnk['gene'] = rnk['gene'].apply(lambda x: x.split(' ')[0])
        rnk = rnk.dropna()

        enr = gp.prerank(rnk=rnk,
                        gene_sets=pid,
                        max_size=10000,
                        seed=6,
                        permutation_num=1000)
        res = enr.res2d.sort_values('NES', ascending=False)

        # Filter by q-value and sort by absolute NES value
        filtered_res = res[res['FDR q-val'] < 0.25].copy()
        filtered_res.loc[:, 'shortened'] = filtered_res['Term'].apply(extract_middle)
        filtered_res.loc[:, 'mutation'] = mut
        filtered_res.loc[:, 'abs_nes'] = abs(filtered_res['NES'])
        appended_results.append(filtered_res)

    final_results = pd.concat(appended_results, ignore_index=True)
    return final_results

def create_plot(df, cancer_type, output_path):
    merged_df = None
    dfs = {mutation: group for mutation, group in df.groupby('mutation')}
    
    pathway_scores = df.groupby('shortened')['abs_nes'].mean().sort_values(ascending=False)
    top_pathways = pathway_scores.head(7).index.tolist()
    
    for mutant, mutant_df in dfs.items():
        mutant_df = mutant_df[mutant_df['shortened'].isin(top_pathways)][['shortened', 'NES']]
        mutant_df.columns = ['pathway', mutant]
        
        if merged_df is None:
            merged_df = mutant_df
        else:
            merged_df = merged_df.merge(mutant_df, on='pathway', how='outer')

    if merged_df is not None:
        merged_df = merged_df.set_index('pathway')
        merged_df = merged_df.reindex(top_pathways)
        
        fig, ax = plt.subplots(figsize=(12, 7))
        x = np.arange(len(merged_df.index))
        width = 0.15

        for i, mutation in enumerate(merged_df.columns):
            bars = ax.bar(x + i * width, 
                         merged_df[mutation], 
                         width, 
                         label=mutation,
                         color=bright_colors[mutation],
                         edgecolor='darkgray',
                         linewidth=1.5)

        ax.set_xlabel('Pathway', fontsize=12, labelpad=10)
        ax.set_ylabel('Normalized Enrichment Score (NES)', fontsize=12, labelpad=10)
        ax.set_title(f'Pathway Analysis for {cancer_type} KRAS Mutations', 
                    fontsize=14, pad=20)
        
        ax.set_xticks(x + width * (len(merged_df.columns) - 1) / 2)
        ax.set_xticklabels(merged_df.index, rotation=45, ha='right')
        
        ax.yaxis.grid(True, linestyle='--', alpha=0.7)
        ax.set_axisbelow(True)
        
        ax.axhline(y=0, color='black', linestyle='-', linewidth=0.5)
        
        ax.legend(title='Mutations', 
                 bbox_to_anchor=(1.05, 1), 
                 loc='upper left',
                 borderaxespad=0)
        
        plt.tight_layout()
        plt.savefig(f'{output_path}/{cancer_type}_mutation_pathway_analysis.png', 
                   bbox_inches='tight', 
                   dpi=300)
        plt.close()

# Run analysis for each cancer type
for analysis in analyses:
    cancer_type = analysis["cancer_type"]
    gene_change = analysis["gene_change"]
    
    print(f"Processing {cancer_type}...")
    df = rungsea(cancer_type, "KRAS", gene_change)
    create_plot(df, cancer_type, '/Users/sahajsatani/Documents/UTSW')
    print(f"Completed {cancer_type} analysis")
